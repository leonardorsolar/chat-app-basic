import express, { Request, Response } from "express"
import cors from "cors"

const app = express()
const PORT = 3001

// Middleware
app.use(cors())
app.use(express.json())

// Respostas automÃ¡ticas do bot
const botResponses = [
    "Interessante! Me conte mais sobre isso.",
    "Entendo o que vocÃª estÃ¡ dizendo.",
    "Isso Ã© muito legal! Continue...",
    "Hmm, deixe-me pensar sobre isso...",
    "Ã“tima pergunta! Aqui estÃ¡ o que penso:",
    "Posso ajudar vocÃª com isso!",
    "Isso me lembra de algo importante.",
    "Vamos explorar essa ideia juntos!",
]

app.get("/", (req: Request, res: Response) => {
    res.send("Servidor do Chatbot estÃ¡ rodando!")
})

// Rota de chat
app.post("/api/chat", (req: Request, res: Response) => {
    const { message } = req.body

    if (!message) {
        return res.status(400).json({ error: "Mensagem Ã© obrigatÃ³ria" })
    }

    console.log(`Mensagem recebida: ${message}`)

    // Simula um pequeno delay para parecer mais real
    setTimeout(() => {
        // Seleciona uma resposta aleatÃ³ria
        const randomResponse =
            botResponses[Math.floor(Math.random() * botResponses.length)]

        // Adiciona contexto baseado na mensagem do usuÃ¡rio
        let reply = randomResponse

        if (
            message.toLowerCase().includes("olÃ¡") ||
            message.toLowerCase().includes("oi")
        ) {
            reply = "OlÃ¡! Como posso ajudar vocÃª hoje? ðŸ˜Š"
        } else if (message.toLowerCase().includes("como vai")) {
            reply =
                "Estou muito bem, obrigado por perguntar! E vocÃª, como estÃ¡?"
        } else if (
            message.toLowerCase().includes("tchau") ||
            message.toLowerCase().includes("adeus")
        ) {
            reply = "AtÃ© logo! Foi um prazer conversar com vocÃª! ðŸ‘‹"
        } else if (message.toLowerCase().includes("ajuda")) {
            reply = "Claro! Estou aqui para ajudar. O que vocÃª precisa?"
        } else if (message.toLowerCase().includes("?")) {
            reply = `Boa pergunta! Sobre "${message}", eu diria que Ã© um tÃ³pico interessante para explorarmos.`
        }

        res.json({
            reply,
            timestamp: new Date().toISOString(),
        })
    }, 500 + Math.random() * 1000) // Delay entre 500ms e 1500ms
})

// Rota de health check
app.get("/health", (req: Request, res: Response) => {
    res.json({ status: "ok", message: "Servidor estÃ¡ funcionando!" })
})

// Iniciar servidor
app.listen(PORT, () => {
    console.log(`ðŸš€ Servidor rodando em http://localhost:${PORT}`)
    console.log(`ðŸ“¡ API disponÃ­vel em http://localhost:${PORT}/api/chat`)
})
