from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime
import asyncio
import random
import logging
import time
from typing import Dict

from schemas import ChatRequest, ChatResponse, HealthResponse, ErrorResponse

# ConfiguraÃ§Ã£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Chatbot Backend API",
    description="Backend do Chatbot usando FastAPI e Pydantic",
    version="1.0.0"
)

# ConfiguraÃ§Ã£o do CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produÃ§Ã£o, especifique os domÃ­nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Respostas automÃ¡ticas do bot
BOT_RESPONSES = [
    "Interessante! Me conte mais sobre isso.",
    "Entendo o que vocÃª estÃ¡ dizendo.",
    "Isso Ã© muito legal! Continue...",
    "Hmm, deixe-me pensar sobre isso...",
    "Ã“tima pergunta! Aqui estÃ¡ o que penso:",
    "Posso ajudar vocÃª com isso!",
    "Isso me lembra de algo importante.",
    "Vamos explorar essa ideia juntos!",
]


@app.get("/", tags=["Root"])
async def root() -> Dict[str, str]:
    """Rota raiz do servidor"""
    return {"message": "Servidor do Chatbot estÃ¡ rodando!"}


@app.post(
    "/api/chat",
    response_model=ChatResponse,
    status_code=status.HTTP_200_OK,
    responses={
        400: {"model": ErrorResponse, "description": "Mensagem invÃ¡lida"},
        422: {"description": "Erro de validaÃ§Ã£o dos dados"}
    },
    tags=["Chat"],
    summary="Enviar mensagem ao chatbot",
    description="Recebe uma mensagem do usuÃ¡rio e retorna uma resposta do bot com metadata"
)
async def chat(request: ChatRequest) -> ChatResponse:
    """
    Endpoint principal do chat.
    
    ValidaÃ§Ãµes realizadas:
    - Mensagem nÃ£o pode estar vazia
    - Mensagem deve ter entre 1 e 1000 caracteres
    - Mensagem deve conter pelo menos um caractere alfanumÃ©rico
    
    Retorna:
    - reply: Resposta do bot
    - timestamp: HorÃ¡rio da resposta
    - message_length: Tamanho da mensagem original
    - processing_time: Tempo de processamento
    """
    start_time = time.time()
    
    # Log da mensagem recebida (jÃ¡ validada pelo Pydantic)
    logger.info(f"ðŸ“¨ Mensagem recebida: '{request.message}' | User ID: {request.user_id}")
    
    # A mensagem jÃ¡ foi validada e limpa pelo validator do Pydantic
    message = request.message
    message_lower = message.lower()
    
    # Simula um pequeno delay para parecer mais real
    delay = 0.5 + random.random()  # Entre 0.5s e 1.5s
    await asyncio.sleep(delay)
    
    # Seleciona uma resposta aleatÃ³ria
    reply = random.choice(BOT_RESPONSES)
    
    # Adiciona contexto baseado na mensagem do usuÃ¡rio
    if "olÃ¡" in message_lower or "oi" in message_lower:
        reply = "OlÃ¡! Como posso ajudar vocÃª hoje? ðŸ˜Š"
    elif "como vai" in message_lower:
        reply = "Estou muito bem, obrigado por perguntar! E vocÃª, como estÃ¡?"
    elif "tchau" in message_lower or "adeus" in message_lower:
        reply = "AtÃ© logo! Foi um prazer conversar com vocÃª! ðŸ‘‹"
    elif "ajuda" in message_lower:
        reply = "Claro! Estou aqui para ajudar. O que vocÃª precisa?"
    elif "?" in message:
        reply = f'Boa pergunta! Sobre "{message}", eu diria que Ã© um tÃ³pico interessante para explorarmos.'
    
    # Calcula tempo de processamento
    processing_time = time.time() - start_time
    
    # Log da resposta enviada
    logger.info(f"ðŸ“¤ Resposta enviada: '{reply[:50]}...' | Tempo: {processing_time:.3f}s")
    
    return ChatResponse(
        reply=reply,
        timestamp=datetime.utcnow().isoformat() + "Z",
        message_length=len(message),
        processing_time=round(processing_time, 3)
    )


@app.get(
    "/health",
    response_model=HealthResponse,
    tags=["Health"]
)
async def health_check() -> HealthResponse:
    """Rota de health check para verificar o status do servidor"""
    return HealthResponse(
        status="ok",
        message="Servidor estÃ¡ funcionando!"
    )


if __name__ == "__main__":
    import uvicorn
    
    PORT = 3002
    
    print(f"ðŸš€ Servidor rodando em http://localhost:{PORT}")
    print(f"ðŸ“¡ API disponÃ­vel em http://localhost:{PORT}/api/chat")
    print(f"ðŸ“š DocumentaÃ§Ã£o em http://localhost:{PORT}/docs")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=PORT,
        reload=True
    )

# 1. Instalar dependÃªncias
#cd backend_python
#poetry install

# 2. Rodar o servidor
#poetry run python main.py

# 1. Ativar modo debug
# Editar main.py: level=logging.DEBUG

# 2. Rodar aplicaÃ§Ã£o
#poetry run python main.py

# 3. Analisar logs
#poetry run python analyze_logs.py debug.log